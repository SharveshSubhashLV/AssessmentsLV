# -*- coding: utf-8 -*-
"""IA1-LAB-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pVYsGj9tcYxO2t1OrdNXT6nXEqKOJah6
"""

import pandas as pd
df = pd.read_csv("/content/expenses.csv")
df.head()

"""#Handling null values"""

df.isna().sum()

df['bmi'].fillna(df['bmi'].mean(), inplace=True)
df.isna().sum()

df['region'].value_counts()

"""#Plotting boxplots to identify the outliers

Initial count of rows
"""

df.count()

import seaborn as sns
bmi_outliers = sns.boxplot(df['bmi'])
bmi_outliers

sns.boxplot(df['age'])

sns.boxplot(df['children'])

sns.boxplot(df['charges'])

"""#Filtering out the outliers after find the threshold for values in different columns

Clearly from the box plot, we can say that only charges and bmi column has outliers.

Count of rows after filtering
"""

df = df[df['charges']<35000]
df =df[df['bmi']<46]
df.count()

df.info()

"""#Encoding the categorical columns

Only sex, region and smoker columns are categorical.
"""

from sklearn.preprocessing import LabelEncoder
lb = LabelEncoder()
df['sex'] = lb.fit_transform(df['sex'])
df['sex'].value_counts()

df['smoker']  = lb.fit_transform(df['smoker'])
df['region'] = lb.fit_transform(df['region'])
df

"""#Cleaning the dataset from duplicates"""

duplicates = df.duplicated(keep=False)
df['dup_bool'] = duplicates
df[df['dup_bool'] == True].count()

df = df[df['dup_bool'] == False]
df = df.drop('dup_bool',axis=1)

"""#Feature Selection

Now plotting a graph for pairs of columns for all columns in the dataframe
"""

sns.pairplot(df)

"""Now plotting a heatmap with correlation matrix for all columns in the dataframe"""

sns.heatmap(df.corr())

"""We can clearly see that, charges column is significantly correlated by age, smoker, children and region."""

df = df.drop('sex',axis=1)
df = df.drop('bmi',axis=1)
df

"""#Scaling the data for good model performance"""

from sklearn.preprocessing import StandardScaler
sc= StandardScaler()
df1 = sc.fit_transform(df)
df1

df2 = pd.DataFrame(df1,columns=df.columns)
df2

"""#Data Splitting and Model Creating"""

X = df2.drop('charges',axis=1)
y = df2['charges']

from sklearn.model_selection import train_test_split


X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=30)

from sklearn.linear_model import LinearRegression

regressor = LinearRegression()

trained_model = regressor.fit(X_train,y_train)

y_pred = trained_model.predict(X_test)

"""#Model Evaluation"""

from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

mse = mean_squared_error(y_test,y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test,y_pred)

print("MSE: ",mse)
print("RMSE: ",rmse)
print("R2: ",r2)